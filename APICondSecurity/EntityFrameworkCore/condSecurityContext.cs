// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace APICondSecurity.Models;

public partial class condSecurityContext : DbContext
{
    public condSecurityContext()
    {
    }

    public condSecurityContext(DbContextOptions<condSecurityContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Cameras> Cameras { get; set; }

    public virtual DbSet<Cidade> Cidade { get; set; }

    public virtual DbSet<Condominio> Condominio { get; set; }

    public virtual DbSet<Endereco> Endereco { get; set; }

    public virtual DbSet<Notificacao> Notificacao { get; set; }

    public virtual DbSet<Permissao> Permissao { get; set; }

    public virtual DbSet<Portao> Portao { get; set; }

    public virtual DbSet<Registros> Registros { get; set; }

    public virtual DbSet<Residencia> Residencia { get; set; }

    public virtual DbSet<Rfid> Rfid { get; set; }

    public virtual DbSet<TipoUsuario> TipoUsuario { get; set; }

    public virtual DbSet<Uf> Uf { get; set; }

    public virtual DbSet<Usuario> Usuario { get; set; }

    public virtual DbSet<Veiculo> Veiculo { get; set; }

    public virtual DbSet<VeiculoTerceiro> VeiculoTerceiro { get; set; }

    public virtual DbSet<VeiculoUsuario> VeiculoUsuario { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#pragma warning disable CS1030 // diretiva de #aviso
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Database=cond-security;Host=cond-security.postgres.database.azure.com;Username=condsecurity;Password=TCS2024@;SSL Mode=Require;Persist Security Info=True");
#pragma warning restore CS1030 // diretiva de #aviso

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Cameras>(entity =>
        {
            entity.HasKey(e => new { e.IdCamera, e.IpCamera }).HasName("cameras_pkey");

            entity.Property(e => e.IdCamera).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdCondominioNavigation).WithMany(p => p.Cameras)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("cameras_id_condominio_fkey");
        });

        modelBuilder.Entity<Cidade>(entity =>
        {
            entity.HasKey(e => e.IdCidade).HasName("cidade_pkey");
        });

        modelBuilder.Entity<Condominio>(entity =>
        {
            entity.HasKey(e => e.IdCondominio).HasName("condominio_pkey");

            entity.HasOne(d => d.IdEnderecoNavigation).WithMany(p => p.Condominio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("condominio_id_endereco_fkey");
        });

        modelBuilder.Entity<Endereco>(entity =>
        {
            entity.HasKey(e => e.IdEndereco).HasName("endereco_pkey");

            entity.HasOne(d => d.IdUfNavigation).WithMany(p => p.Endereco)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("endereco_id_uf_fkey");
        });

        modelBuilder.Entity<Notificacao>(entity =>
        {
            entity.HasKey(e => e.IdNotificacao).HasName("notificacao_pkey");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Notificacao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("notificacao_id_usuario_fkey");
        });

        modelBuilder.Entity<Permissao>(entity =>
        {
            entity.HasKey(e => e.IdPermissao).HasName("permissao_pkey");

            entity.HasOne(d => d.IdNotificacaoNavigation).WithMany(p => p.Permissao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("permissao_id_notificacao_fkey");
        });

        modelBuilder.Entity<Portao>(entity =>
        {
            entity.HasKey(e => e.IdPortao).HasName("portao_pkey");

            entity.HasOne(d => d.IdCondominioNavigation).WithMany(p => p.Portao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("portao_id_condominio_fkey");
        });

        modelBuilder.Entity<Registros>(entity =>
        {
            entity.HasKey(e => e.IdRegistros).HasName("registros_pkey");

            entity.HasOne(d => d.IdPortaoNavigation).WithMany(p => p.Registros)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("portao");

            entity.HasOne(d => d.IdVeiculoTerceiroNavigation).WithMany(p => p.Registros).HasConstraintName("registros_id_veiculo_terceiro_fkey");

            entity.HasOne(d => d.IdVeiculoUsuarioNavigation).WithMany(p => p.Registros).HasConstraintName("registros_id_veiculo_usuario_fkey");
        });

        modelBuilder.Entity<Residencia>(entity =>
        {
            entity.HasKey(e => e.IdResidencia).HasName("residencia_pkey");

            entity.HasOne(d => d.IdCondominioNavigation).WithMany(p => p.Residencia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("residencia_id_condominio_fkey");
        });

        modelBuilder.Entity<Rfid>(entity =>
        {
            entity.HasKey(e => e.IdRfid).HasName("RFID_pkey");

            entity.HasOne(d => d.IdCondominioNavigation).WithMany(p => p.Rfid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RFID_id_condominio_fkey");
        });

        modelBuilder.Entity<TipoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdTipoUsuario).HasName("tipo_usuario_pkey");
        });

        modelBuilder.Entity<Uf>(entity =>
        {
            entity.HasKey(e => e.IdUf).HasName("uf_pkey");

            entity.Property(e => e.Sigla).IsFixedLength();

            entity.HasOne(d => d.IdCidadeNavigation).WithMany(p => p.Uf)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("uf_id_cidade_fkey");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario).HasName("usuario_pkey");

            entity.HasOne(d => d.IdCondominioNavigation).WithMany(p => p.Usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("usuario_id_condominio_fkey");

            entity.HasOne(d => d.IdResidenciaNavigation).WithMany(p => p.Usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("usuario_id_residencia_fkey");

            entity.HasOne(d => d.IdTipoUsuarioNavigation).WithMany(p => p.Usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("usuario_id_tipo_usuario_fkey");
        });

        modelBuilder.Entity<Veiculo>(entity =>
        {
            entity.HasKey(e => new { e.IdVeiculo, e.Placa }).HasName("veiculo_pkey");

            entity.Property(e => e.IdVeiculo).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdCondominioNavigation).WithMany(p => p.Veiculo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("veiculo_id_condominio_fkey");
        });

        modelBuilder.Entity<VeiculoTerceiro>(entity =>
        {
            entity.HasKey(e => e.IdVeiculoTerceiro).HasName("veiculo_terceiro_pkey");

            entity.HasOne(d => d.IdNotificacaoNavigation).WithMany(p => p.VeiculoTerceiro).HasConstraintName("veiculo_terceiro_id_notificacao_fkey");

            entity.HasOne(d => d.IdPermissaoNavigation).WithMany(p => p.VeiculoTerceiro).HasConstraintName("veiculo_terceiro_id_permissao_fkey");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.VeiculoTerceiro).HasConstraintName("veiculo_terceiro_id_usuario_fkey");
        });

        modelBuilder.Entity<VeiculoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdVeiculoUsuario).HasName("veiculo_usuario_pkey");

            entity.HasOne(d => d.IdRf).WithMany(p => p.VeiculoUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("veiculo_usuario_id_RFID_fkey");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.VeiculoUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("veiculo_usuario_id_usuario_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}